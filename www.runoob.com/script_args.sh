#!/bin/bash
#author:jiming.wang
#url:www.runoob.com

#在执行Shell脚本时，可以向脚本传递参数，Shell脚本内获取参数的格式为： $n ，其中，n代表一个数字，0 代表执行的脚本文件名，
# 1 是向脚本传递的第一个参数， 2 是向脚本传递的第二个参数，以此类推......

echo "Shell Scripts传递参数实例："
echo "执行的脚本文件名为： $0"
echo "传递的第一个参数为： $1"
echo "传递的第二个参数为： $2"
echo "传递的第三个参数为： $3"

# 处理参数时使用的几个特殊字符如下
#####################################################################################
#        参数处理	   说明
#        $#	           传递到脚本的参数个数
#        $*            以一个单字符串显示所有向脚本传递的参数。如"$*"用「"」括起来的情况、以"$1 $2 … $n"的形式输出所有参数。
#        $$	           脚本运行的当前进程ID号
#        $!	           后台运行的最后一个进程的ID号
#        $@	           与$*相同，但是使用时加引号，并在引号中返回每个参数。如"$@"用「"」括起来的情况、以"$1" "$2" … "$n" 的形式输出所有参数。
#        $-	           显示Shell使用的当前选项，与set命令功能相同。
#        $?	           显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。
#####################################################################################

echo "向脚本传递的参数个数为： $#"

echo "所有脚本参数为: $*"
echo "所有脚本参数为: \"$*\""
for var in $*
do
	echo $var
done
for var in "$*"  #注意对比与 $* "$@" 运行结果的区别
do
	echo $var
done

echo "所有脚本参数为： $@"
echo "所有脚本参数为： \"$@\""
for var in $@; do
	echo $var
done
for var in "$@"; do #注意对比与 "$*" 运行结果的区别
	echo $var
done

echo "脚本运行的当前进程ID号为： $$"

echo "后台运行的最后一个进程的ID号为： $!"

echo "Shell使用的当前选项为： $-"

echo "脚本最后退出状态为： $?"

#   $* 与 $@  区别：
#   相同点： 都是引用所有参数，在不加 双引号  情况下，两者相同
#   不同点： $* 与 $@ 两者的区别只有在 双引号 中体现。
#    假如，在脚本运行时传递了 1 2 3 三个参数，则 "$*" 等价于 "1 2 3"，即只传递了一个参数，而 "$@" 等价于 "1" "2" "3"，即传递了三个字符串参数。

echo "测试 \$* 与 \$@ 区别："
echo "使用 \"\$*\" 遍历所有参数："
for var in "$*"
do
	echo $var
done

echo "使用 \"\$@\" 遍历所有参数："
for var in "$@"
do
	echo $var
done

