#!/bin/bash
#author: jiming.wang
#date: 2017/07/04

. ../paint.sh
#函数参数： 在Shell中，调用函数时向其传递的参数在函数体内部可以通过 $n 的形式来获取参数的值。
#  如，$1 表示第一个参数， $2 表示第二个参数,以此类推......

#处理参数时可使用的特殊字符如下：
#############################################################################
# 参数处理	说明
#   $#	    传递到脚本的参数个数
#   $*	    以一个单字符串显示所有向脚本传递的参数
#   $$	    脚本运行的当前进程ID号
#   $!	    后台运行的最后一个进程的ID号
#   $@	    与$*相同，但是使用时加引号，并在引号中返回每个参数。
#   $-	    显示Shell使用的当前选项，与set命令功能相同。
#   $?	    显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。
#############################################################################

funcWithParam(){
	echo "第一个参数为： $1"
	echo "第二个参数为： $2"
	echo "第十个参数为： $10"
	echo "第十个参数为： ${10}" # 注意：要注意变量变量，当 n >= 10时，需要使用 ${n} 来获取参数
	echo "第十一个参数为： ${11}"
	echo "参数总数为： $# 个！" # $# 获取参数总个数
	echo "作为一个字符串输出所有参数： $*!"
	
	echo "脚本运行的当前进程ID号为： $$"
	echo "后台运行的最后一个进程的ID号为： $!"
	echo "Shell使用的当前选项为： $-"
	
	sum=0
	for val in $@
	do
		((sum+=$val))
	done
	return $sum
}

funcWithParam 1 2 3 4 5 6 7 8 9 34 73
echo "所有参数和为： $?" # $？获取函数返回值

# $* 与 $@ 区别：
#   相同点： 都是引用所有参数，在不加 双引号  情况下，两者相同
#   不同点： $* 与 $@ 两者的区别只有在 双引号 中体现。
#    假如，在传递参数时传递了 1 2 3 三个参数，则 "$*" 等价于 "1 2 3"，即只传递了一个参数，而 "$@" 等价于 "1" "2" "3"，即传递了三个字符串参数。

funcTest(){
	echo "传递给函数的参数个数为： $#"
	
	echo "传递给函数的参数为： $@"
	echo "传递给函数的参数为： $*"
	echo "传递给函数的参数为： \"$@\""
	echo "传递给函数的参数为： \"$*\""
	
	paintLine
	echo "测试 \$* 与 \$@ 区别："
	echo "使用 \"\$*\" 遍历所有参数："
	i=0
	for var in "$*"
	do
		echo $var
		((++i))
	done
	echo "使用 \"\$*\" 遍历的次数为： $i"

	echo "使用 \"\$@\" 遍历所有参数："
	i=0
	for var in "$@"
	do
		echo $var
		let "i++"
	done
	echo "使用 \"\$@\" 遍历的次数为： $i"
	
	paintLine
	echo "使用 \$* 遍历所有参数："
	i=0
	for var in $*
	do
		echo $var
		let "i++"
	done
	echo "使用 \$* 遍历的次数为：$i"
	
	paintLine
	echo "使用 \$@ 遍历所有参数："
	i=0
	for var in $@
	do
		echo $var
		((++i))
	done
	echo "使用 \$@ 遍历的次数为：$i"
}

paintLine
funcTest 1 2 3 4 5 6 7 8 9 34 73